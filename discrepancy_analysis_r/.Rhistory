getwd()
getwd()
setwd(C:\Users\augustg\Documents\R)
setwd(C:/sers/augustg/Documents/R)
setwd(C:/users/augustg/Documents/R)
setwd(C:\users\augustg\Documents\R)
setwd(C:\\users\\augustg\\Documents\\R)
setwd(C:\users\augustg\Documents\R)
getwd()
setwd(C:\\users\\augustg\\Documents\\R)
setwd(C:\\users\\augustg\\Documents\\R\\)
setwd(C:/users/augustg/Documents/R/r)
setwd(C:/users)
setwd(C://users)
setwd(C:)
setwd(":/augustg/Documents/R/r")
data1 <- read.csv(url("http://stat.columbia.edu/~rachel/datasets/nyt1.csv"))
data1 <- read.csv(url("http://stat.columbia.edu/~rachel/datasets/nyt1.csv"))
head(data1)
data1 <- read.csv(url("http://stat.columbia.edu/~rachel/datasets/nyt1.csv"))
head(data1)
?cut
data1$agecat <- cut(data1$Age, -c(-Inf,0,18,24,34,44,54,64,Inf))
head(data1$agecat)
summary(data1)
data1$agecat <- cut(data1$Age,c(-Inf,0,18,24,34,44,54,64,Inf))
head(data1$agecat)
summary(data1)
?doBy
?doBy
install.packages("doBy")
library("doBy")
siterange <- function(x){c(length(x), min(x), mean(x), max(x))}
summaryBy(Age~agecat, data = data 1, FUN = siterange)
head(data1$agecat)
summaryBy(Age~agecat, data = data1, FUN = siterange)
SummaryBy(Gender+Signed_In+Impressions+Clicks~agecat, data = data1)
summaryBy(Gender+Signed_In+Impressions+Clicks~agecat, data = data1)
git status
rm(list=ls())
usedcars <- read.csv("C:/Users/augustg/Documents/R/r/machine_learning_with_r/2148OS_code/chapter 2/usedcars.csv", stringsAsFactors = FALSE)
boxplot(usedcars$price, main = "Boxplot of Used Car Prices", ylab = "Price ($)")
boxplot(usedcars$mileage, main = "Boxplot of Used Car Mileage", ylab = "Odometer (mi.)")
boxplot(usedcars$price, main = "Boxplot of Used Car Prices", ylab = "Price ($)")
hist(usedcars$price, main = "Histogram of Used Car Prices", xlab = "Price ($)")
hist(usedcars$mileage, main = "Histogram of Used Car Mileage", xlab = "Odeometer (mi.)")
var(usedcars$price)
sd(usedcars$price)
var(usedcars$mileage)
sd(usedcars$mileage)
?datasets
library(help = "datasets")
require("datasets")
LakeHuron
UCBAdmissions
crimtab
discoveries
sunspot.year
rm(list=ls())
str(sunspot.year)
plot(sunspot.year)
require("fpp")
?fpp
??fpp
library("fpp")
require(fpp)
install.packages("fpp")
require("fpp")
forecast(sunspot.year)
plot(forecast(sunspot.year))
plot(forecast(sunspot.year), ylim=c(0,)
plot(forecast(sunspot.year), ylim=c(0,))
plot(forecast(sunspot.year), ylim=c(0,))
plot(forecast(sunspot.year), ylim=c(0,1500))
forecast(sunspot.year, Lambda=0)
time(sunspot.year)
cycle(sunspot.year)
?time
?par
plot.ts(forecast(sunspot.year))
ts.plot(forecast(sunspot.year))
?ts.plot
forecast(sunspot.year, lambda=0)
forecast(sunspot.year, lambda=NULL)
forecast(sunspot.year, lambda=0)
plot(forecast(sunspot.year), ylim=c(0,800))
plot(forecast(sunspot.year), xlim= c(1700, 1993) ylim=c(0,800))
plot(forecast(sunspot.year), xlim= c(1700, 1993, ylim=c(0,800))
plot(forecast(sunspot.year), xlim= c(1700, 1993, ylim=c(0,800)))
plot(forecast(sunspot.year), xlim= c(1700, 1993), ylim=c(0,800)))
plot(forecast(sunspot.year), xlim= c(1700, 1993) ylim=c(0,800)))
plot(forecast(sunspot.year), (xlim= c(1700, 1993), ylim=c(0,800)))
plot(forecast(sunspot.year), ylim=c(0,800))
plot(forecast(sunspot.year), ylim=c(0,800), xlim=(1800, 1990))
plot(forecast(sunspot.year), ylim=c(0,800) xlim=(1800, 1990))
plot(forecast(sunspot.year), ylim=c(0,800), xlim=(1800, 1990))
plot(forecast(sunspot.year) ylim=c(0,800), xlim=(1800, 1990))
plot(forecast(sunspot.year) xlim=(1800, 1990))
xlim=(1800, 1990))
plot(forecast(sunspot.year),
xlim=(1800, 1990))
plot(forecast(sunspot.year),
xlim=c(1800, 1990),
ylim=c(0, 800))
str(sunspot.year)
?time
time(sunspot.year)
install.packages("fpp")
forecast(sunspot.year)
sunspot.year
write.csv(forecast(sunspot.year))
write.csv(forecast(sunspot.year), file = "C:\Users\augustg\Desktop\sunspot.csv")
write.csv(forecast(sunspot.year), file = "C:/Users/augustg/Desktop/sunspot.csv")
setwd('C:/Users/aguadamuz/Documents/blog/r_files/discrepancy_analysis_r')
getwd()
setwd('C:/Users/aguadamuz/Documents/blog/r_files/discrepancy_analysis_r')
setwd("C:/Users/aguadamuz/Documents/blog/r_files/discrepancy_analysis_r")
setwd("C:/Users/aguadamuz/Documents/blog/r_files/discrepancy_analysis_r/")
setwd('C:/Users/aguadamuz/Documents/blog/r_files/discrepancy_analysis_r/')
setwd('C:/Users/augustg/Documtents/blog/r_files/discrepancy_analysis_r/')
setwd('C:/Users/augustg/Documents/blog/r_files/discrepancy_analysis_r')
getwd()
rm(list = ls())
list_1 <- read.csv(list_1.csv, HEADER = TRUE)
list_1 <- read.csv(list_1.csv, header = TRUE)
list_1 <- read.csv("list_1.csv", header = TRUE)
list_1
list_2 <- read.csv("list_2.csv", header = TRUE)
list_1
list_2
?intersect
intersect(list_1, list_2)
intersect(list_1$Product.ID, list_2$Product.ID)
setdiff(list_1$Product.ID, list_2$Product.ID)
setequal(list_1$Product.ID, list_2$Product.ID)
intersect(list_1$Product.ID, list_2$Product.ID)
setdiff(list_1$Product.ID, list_2$Product.ID)
setdiff(list_2$Product.ID, list_1$Product.ID)
match(list_1$Description, list_2$Description)
match(list_2$Description, list_1$Description)
if(list_1$Product.ID = list_2$Product.ID) then list_1$Description %in% list_2$Description
all.equal(list_1, list, check.attributes = TRUE, use.names = TRUE)
if(list_1$Product.ID = list_2$Product.ID) then list_1$Description %in% list_2$Description
all.equal
list_1
list_2
match(list_1$Description, list_2$Description)
setequal(list_1$Product.ID, list_2$Product.ID)
intersect(list_1$Product.ID, list_2$Product.ID)
# See which items are in list_1 but not in list_2
setdiff(list_1$Product.ID, list_2$Product.ID)
# See which items are in list_2 but not in list_2
setdiff(list_2$Product.ID, list_1$Product.ID)
match(list_1$Description, list_2$Description)
setdiff(list_2$Product.ID, list_1$Product.ID)
if list_1$Product.ID %in% list_2$Product.ID then 1
if (list_1$Product.ID %in% list_2$Product.ID)  1 else 0
if (list_1$Product.ID %in% list_2$Product.ID) then 1 else 0
if (list_1$Product.ID %in% list_2$Product.ID) print 1 else 0
if (list_1$Product.ID %in% list_2$Product.ID) print(1) else print(0)
if(list_1$Product.ID %in% list_2$Product.ID) print(1) else print(0)
match(list_1$Product.ID, list_2$Product.ID)
match(list_1, list_2)
prod_id <- match(list_1$Product.ID)
prod_id <- match(list_1$Product.ID, list_2$Product.ID)
desc <- match(list_1$Description, list_2$Description)
price <- match(list_1$Wholesale.Price, list_2$Wholesale.Price)
table(prod_id, desc, price)
table(prod_id, desc)
list_1
list_2
setequal(list_1$Product.ID, list_2$Product.ID)
intersect(list_1$Product.ID, list_2$Product.ID)
setdiff(list_1$Product.ID, list_2$Product.ID)
setdiff(list_2$Product.ID, list_1$Product.ID)
match(list_1$Wholesale.Price, list_2$Wholesale.Price)
list_1$Product.ID %in% list_2$Product.ID
match(list_1$Wholesale.Price, list_2$Wholesale.Price)
intersect(list_1, list_2)
list_3 <- data.frame(intersect(list_1$Product.ID, list_2$Product.ID))
list_3
?intersect
union(list_1, list_2)
data.frame(union(list_1, list_2))
setdiff(list_1, list_2))
setdiff(list_1$Product.ID, list_2$Product.ID))
setdiff(list_1$Product.ID, list_2$Product.ID)
?union
rbind(list_1, list_2)
list_1
list_2
setequal(list_1$Product.ID, list_2$Product.ID)
setdiff(list_1$Product.ID, list_2$Product.ID)
intersect(list_1$Product.ID, list_2$Product.ID)
setdiff(list_1$Product.ID, list_2$Product.ID)
# See which items are in list_2 but not in list_2
setdiff(list_2$Product.ID, list_1$Product.ID)
?match
match(list_1$Wholesale.Price, list_2$Wholesale.Price)
?merge
merge(list_1, list_2)
! merge(list_1, list_2)
rbind(list_1, list_2)
setequal(list_1$Product.ID, list_2$Product.ID)
intersect(list_1$Product.ID, list_2$Product.ID)
setdiff(list_1$Product.ID, list_2$Product.ID)
setdiff(list_2$Product.ID, list_1$Product.ID)
merge(list_1, list_2)
intersect(list_1$Product.ID, list_2$Product.ID)
list_1
list_2
require("repmis")
install.packages("repmis")
require("repmis")
list_1 <- source_DropboxData(list_1.csv, key=tv93kl0awjsj12l, sep=",", header=TRUE)
list_1 <- source_DropboxData(list_1.csv, key=tv93kl0awjsj12l, sep=",", header=TRUE)
list_2 <- source_DropboxData(list_2.csv, key=3e1uo51ynm8i3ow, sep=",", header=TRUE)
"
list_1 <- source_DropboxData("list_1.csv?dl=0", key="tv93kl0awjsj12l", sep=",", header=TRUE)
list_1 <- source_DropboxData("list_1.csv", key="tv93kl0awjsj12l", sep=",", header=TRUE)
list_2 <- source_DropboxData("list_2.csv", key="3e1uo51ynm8i3ow", sep=",", header=TRUE)
list_1
list_2
setequal(list_1$Product.ID, list_2$Product.ID)
intersect(list_1$Product.ID, list_2$Product.ID)
setdiff(list_1$Product.ID, list_2$Product.ID)
# load the CSV data directly from dropbox
struc(list_1)
str(list_1)
setequal(list_1$Product ID, list_2$Product ID)
names(list_1)
rename(list_1, c("Product ID" = "Product.ID", "Wholesale Price" = "Wholesale.Price"))
require("plyr")
rename(list_1, c("Product ID" = "Product.ID", "Wholesale Price" = "Wholesale.Price"))
rename(list_2, c("Product ID" = "Product.ID", "Wholesale Price" = "Wholesale.Price"))
list_1
list_2
list_1 <- rename(list_1, c("Product ID" = "Product.ID", "Wholesale Price" = "Wholesale.Price"))
list_2 <- rename(list_2, c("Product ID" = "Product.ID", "Wholesale Price" = "Wholesale.Price"))
list_1
list_2
setequal(list_1$Product.ID, list_2$Product.ID)
intersect(list_1$Product.ID, list_2$Product.ID)
setdiff(list_1$Product.ID, list_2$Product.ID)
setdiff(list_2$Product.ID, list_1$Product.ID)
merge(list_1, list_2)
